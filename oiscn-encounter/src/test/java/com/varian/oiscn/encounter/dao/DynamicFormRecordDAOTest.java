package com.varian.oiscn.encounter.dao;

import com.varian.oiscn.connection.ConnectionPool;
import com.varian.oiscn.encounter.dynamicform.DynamicFormRecord;
import com.varian.oiscn.encounter.util.MockDatabaseConnection;
import com.varian.oiscn.encounter.util.MockDtoUtil;
import com.varian.oiscn.encounter.util.MockPreparedStatement;
import com.varian.oiscn.encounter.util.MockResultSet;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Matchers;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Date;

import static java.sql.Statement.RETURN_GENERATED_KEYS;

@RunWith(PowerMockRunner.class)
@PrepareForTest({DynamicFormRecordDAO.class, ConnectionPool.class})
public class DynamicFormRecordDAOTest {

    private Connection connection;
    private DynamicFormRecordDAO dynamicFormRecordDAO;

    @Before
    public void setup(){
        connection = PowerMockito.mock(MockDatabaseConnection.class);
        dynamicFormRecordDAO = new DynamicFormRecordDAO(MockDtoUtil.givenUserContext());
    }

    @Test
    public void givenDynamicFormRecordThenReturnAutoGeneratedId() throws SQLException{
        PreparedStatement ps = PowerMockito.mock(MockPreparedStatement.class);
        PowerMockito.when(connection.prepareStatement(Matchers.anyString(), Matchers.eq(RETURN_GENERATED_KEYS))).thenReturn(ps);
        ResultSet resultSet = PowerMockito.mock(MockResultSet.class);
        PowerMockito.when(ps.executeUpdate()).thenReturn(1);
        PowerMockito.when(ps.getGeneratedKeys()).thenReturn(resultSet);
        PowerMockito.when(resultSet.next()).thenReturn(true);
        String createdId = "createdId";
        PowerMockito.when(resultSet.getString(1)).thenReturn(createdId);
        DynamicFormRecord dynamicFormRecord = new DynamicFormRecord();
        dynamicFormRecord.setEncounterId(1L);
        Assert.assertEquals(createdId, dynamicFormRecordDAO.create(connection, dynamicFormRecord));
    }

    @Test
    public void givenHisIdAndEncounterIdThenReturnDynamicFormRecord() throws SQLException{
        PreparedStatement ps = PowerMockito.mock(MockPreparedStatement.class);
        PowerMockito.when(connection.prepareStatement(Matchers.anyString())).thenReturn(ps);
        ResultSet resultSet = PowerMockito.mock(MockResultSet.class);
        PowerMockito.when(ps.executeQuery()).thenReturn(resultSet);
        PowerMockito.when(resultSet.next()).thenReturn(true).thenReturn(false);
        DynamicFormRecord dynamicFormRecord = new DynamicFormRecord();
        dynamicFormRecord.setId("id");
        dynamicFormRecord.setPatientSer(1234L);
        dynamicFormRecord.setEncounterId(1L);
        dynamicFormRecord.setTemplateId("templateId");
        PowerMockito.when(resultSet.getString("id")).thenReturn(dynamicFormRecord.getId());
        PowerMockito.when(resultSet.getString("templateId")).thenReturn(dynamicFormRecord.getTemplateId());
        PowerMockito.when(resultSet.getTimestamp("createdDate")).thenReturn(null);
        Assert.assertEquals(Arrays.asList(dynamicFormRecord), dynamicFormRecordDAO.queryDynamicFormRecordInfoByEncounterId(connection, 1234L, 1L));
    }

    @Test
    public void givenIdThenReturnDynamicFormRecordInfo() throws SQLException{
        PreparedStatement ps = PowerMockito.mock(MockPreparedStatement.class);
        PowerMockito.when(connection.prepareStatement(Matchers.anyString())).thenReturn(ps);
        ResultSet resultSet = PowerMockito.mock(MockResultSet.class);
        PowerMockito.when(ps.executeQuery()).thenReturn(resultSet);
        PowerMockito.when(resultSet.next()).thenReturn(true);
        String keyValuePairListString = "keyValuePairListString";
        PowerMockito.when(resultSet.getString(1)).thenReturn(keyValuePairListString);
        Assert.assertEquals(keyValuePairListString, dynamicFormRecordDAO.queryDynamicFormRecordInfoById(connection, "id").get("recordInfo"));
    }

    @Test
    public void givenCarePathInstanceIdAndTemplateIdThenReturnDynamicFormRecord() throws SQLException{
        PreparedStatement ps = PowerMockito.mock(MockPreparedStatement.class);
        PowerMockito.when(connection.prepareStatement(Matchers.anyString())).thenReturn(ps);
        ResultSet resultSet = PowerMockito.mock(MockResultSet.class);
        PowerMockito.when(ps.executeQuery()).thenReturn(resultSet);
        PowerMockito.when(resultSet.next()).thenReturn(true);
        DynamicFormRecord dynamicFormRecord = new DynamicFormRecord();
        dynamicFormRecord.setId(String.valueOf(1));
        dynamicFormRecord.setHisId("hisId");
        dynamicFormRecord.setEncounterId(2L);
        dynamicFormRecord.setCarePathInstanceId("carePathInstanceId");
        dynamicFormRecord.setTemplateId("templateId");
        dynamicFormRecord.setCreateDate(null);
        dynamicFormRecord.setCreatedUser("createdUser");
        PowerMockito.when(resultSet.getInt("id")).thenReturn(Integer.parseInt(dynamicFormRecord.getId()));
        PowerMockito.when(resultSet.getString("hisId")).thenReturn(dynamicFormRecord.getHisId());
        PowerMockito.when(resultSet.getLong("encounterId")).thenReturn(dynamicFormRecord.getEncounterId());
        PowerMockito.when(resultSet.getString("carePathInstanceId")).thenReturn(dynamicFormRecord.getCarePathInstanceId());
        PowerMockito.when(resultSet.getString("templateId")).thenReturn(dynamicFormRecord.getTemplateId());
        PowerMockito.when(resultSet.getTimestamp("createdDate")).thenReturn(null);
        PowerMockito.when(resultSet.getString("createdUser")).thenReturn(dynamicFormRecord.getCreatedUser());
        Assert.assertEquals(dynamicFormRecord, dynamicFormRecordDAO.queryExistingRecordByCarePathInstanceIdAndTemplateId(connection, "carePathInstanceId", "templateId"));
    }

    @Test
    public void givenDynamicFormRecordThenReturnAffectedRows() throws SQLException{
        PreparedStatement ps = PowerMockito.mock(MockPreparedStatement.class);
        PowerMockito.when(connection.prepareStatement(Matchers.anyString())).thenReturn(ps);
        PowerMockito.when(ps.executeUpdate()).thenReturn(1);
        DynamicFormRecord dynamicFormRecord = new DynamicFormRecord();
        dynamicFormRecord.setId("1");
        dynamicFormRecord.setCreateDate(new Date());
        Assert.assertEquals(1, dynamicFormRecordDAO.update(connection, dynamicFormRecord));
    }

}
